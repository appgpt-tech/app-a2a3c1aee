//Source code generated by AppGPT (www.appgpt.tech)

//Class to create tables and seed new database
import { DataSource } from 'typeorm';
import { DBConfiguration } from './Configuration';
import { SettingsEntity } from './db/Settings.entity';
//autogenerate imports based on resources
import { UsersEntity } from './db/Users.entity';
import { CustomersEntity } from './db/Customers.entity';
import { WorkoutsEntity } from './db/Workouts.entity';
import { NutritionEntity } from './db/Nutrition.entity';
import { HealthMetricsEntity } from './db/HealthMetrics.entity';
import { NotificationsEntity } from './db/Notifications.entity';
import { SupportTicketsEntity } from './db/SupportTickets.entity';

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [
      SettingsEntity,
      UsersEntity,
      CustomersEntity,
      WorkoutsEntity,
      NutritionEntity,
      HealthMetricsEntity,
      NotificationsEntity,
      SupportTicketsEntity,
    ];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables

    await Database.Seed();
  }
  static async Seed() {
    let data: any = {
      Users: [
        {
          name: 'John Doe',
          email: 'john.doe@example.com',
          password: 'password123',
          role: 'admin',
        },
        {
          name: 'Jane Smith',
          email: 'jane.smith@example.com',
          password: 'password456',
          role: 'user',
        },
        {
          name: 'Mike Johnson',
          email: 'mike.johnson@example.com',
          password: 'password789',
          role: 'trainer',
        },
        {
          name: 'Emily Davis',
          email: 'emily.davis@example.com',
          password: 'password101',
          role: 'nutritionist',
        },
        {
          name: 'Chris Brown',
          email: 'chris.brown@example.com',
          password: 'password202',
          role: 'user',
        },
      ],
      Customers: [
        {
          name: 'Alex Johnson',
          email: 'alex.johnson@example.com',
          password: 'alex123',
          age: 29,
          gender: 'Male',
          weight: 75.5,
          height: 1.82,
          healthConditions: 'None',
          goals: 'Lose weight, Build muscle',
          dietaryPreferences: 'Vegan',
          billingAddress: '1234 Maple Street, Springfield, IL',
          country: 'USA',
          phone: '555-1234',
        },
        {
          name: 'Samantha Davis',
          email: 's.davis@example.com',
          password: 'samyPass!9',
          age: 34,
          gender: 'Female',
          weight: 65.2,
          height: 1.68,
          healthConditions: 'Asthma',
          goals: 'Increase stamina, Improve flexibility',
          dietaryPreferences: 'Gluten-free',
          billingAddress: '9876 Oak Lane, Boulder, CO',
          country: 'USA',
          phone: '555-9876',
        },
        {
          name: 'Raj Patel',
          email: 'raj.patel@example.com',
          password: 'rajSecure#4',
          age: 41,
          gender: 'Male',
          weight: 80.3,
          height: 1.75,
          healthConditions: 'Hypertension',
          goals: 'Lose weight, Manage hypertension',
          dietaryPreferences: 'Low sodium',
          billingAddress: '4567 Willow Creek, Austin, TX',
          country: 'USA',
          phone: '555-4567',
        },
        {
          name: 'Emily Turner',
          email: 'e.turner@example.com',
          password: 'turner88*',
          age: 27,
          gender: 'Female',
          weight: 54,
          height: 1.6,
          healthConditions: 'None',
          goals: 'Tone body, Improve mental health',
          dietaryPreferences: 'Pescatarian',
          billingAddress: '321 Pine Road, Asheville, NC',
          country: 'USA',
          phone: '555-3211',
        },
        {
          name: 'Michael Smith',
          email: 'm.smith@example.com',
          password: 'mike2023!',
          age: 37,
          gender: 'Male',
          weight: 88.5,
          height: 1.9,
          healthConditions: 'Pre-diabetes',
          goals: 'Reduce blood sugar, Lose weight',
          dietaryPreferences: 'Low carb',
          billingAddress: '789 Elm St, Portland, OR',
          country: 'USA',
          phone: '555-7890',
        },
      ],
      Workouts: [
        {
          description: 'Morning Yoga Routine',
          relatedCustomer: 1,
          type: 'Yoga',
          duration: 30,
          intensity: 'Low',
          caloriesBurned: 150,
          date: '2023-04-01T07:00:00Z',
        },
        {
          description: 'High-Intensity Interval Training',
          relatedCustomer: 2,
          type: 'HIIT',
          duration: 20,
          intensity: 'High',
          caloriesBurned: 300,
          date: '2023-04-02T06:30:00Z',
        },
        {
          description: 'Evening Walk',
          relatedCustomer: 3,
          type: 'Cardio',
          duration: 45,
          intensity: 'Medium',
          caloriesBurned: 200,
          date: '2023-04-03T19:00:00Z',
        },
        {
          description: 'Strength Training Session',
          relatedCustomer: 4,
          type: 'Strength',
          duration: 60,
          intensity: 'High',
          caloriesBurned: 500,
          date: '2023-04-04T08:00:00Z',
        },
        {
          description: 'Pilates Class',
          relatedCustomer: 5,
          type: 'Pilates',
          duration: 50,
          intensity: 'Medium',
          caloriesBurned: 250,
          date: '2023-04-05T10:00:00Z',
        },
      ],
      Nutrition: [
        {
          description: 'Morning fruit salad',
          relatedCustomer: 1,
          foodItem: 'Apple, Banana, Orange',
          quantity: 1.5,
          calories: 200,
          macronutrients: 'Carbs: 50g, Protein: 2g, Fat: 1g',
          date: '2023-04-01T08:00:00Z',
        },
        {
          description: 'Post-workout protein shake',
          relatedCustomer: 2,
          foodItem: 'Whey Protein, Almond Milk, Banana',
          quantity: 1,
          calories: 350,
          macronutrients: 'Carbs: 30g, Protein: 25g, Fat: 10g',
          date: '2023-04-01T10:30:00Z',
        },
        {
          description: 'Healthy lunch bowl',
          relatedCustomer: 3,
          foodItem: 'Quinoa, Chicken Breast, Avocado',
          quantity: 1,
          calories: 600,
          macronutrients: 'Carbs: 40g, Protein: 35g, Fat: 20g',
          date: '2023-04-01T13:00:00Z',
        },
        {
          description: 'Evening snack',
          relatedCustomer: 4,
          foodItem: 'Greek Yogurt, Honey, Almonds',
          quantity: 1,
          calories: 250,
          macronutrients: 'Carbs: 20g, Protein: 15g, Fat: 5g',
          date: '2023-04-01T16:00:00Z',
        },
        {
          description: 'Dinner',
          relatedCustomer: 5,
          foodItem: 'Salmon, Sweet Potato, Broccoli',
          quantity: 1,
          calories: 700,
          macronutrients: 'Carbs: 50g, Protein: 45g, Fat: 30g',
          date: '2023-04-01T19:00:00Z',
        },
      ],
      HealthMetrics: [
        {
          description: 'Morning Blood Pressure Reading',
          relatedCustomer: 1,
          type: 'Blood Pressure',
          value: 120.5,
          unit: 'mmHg',
          date: '2023-04-01T07:30:00Z',
        },
        {
          description: 'Evening Jogging Distance',
          relatedCustomer: 2,
          type: 'Distance',
          value: 5.3,
          unit: 'Kilometers',
          date: '2023-04-01T19:00:00Z',
        },
        {
          description: 'Afternoon Glucose Level',
          relatedCustomer: 3,
          type: 'Glucose',
          value: 95.2,
          unit: 'mg/dL',
          date: '2023-04-02T15:45:00Z',
        },
        {
          description: 'Weekly Weight Check',
          relatedCustomer: 4,
          type: 'Weight',
          value: 68.4,
          unit: 'Kg',
          date: '2023-04-03T08:00:00Z',
        },
        {
          description: 'Daily Water Intake',
          relatedCustomer: 5,
          type: 'Water Intake',
          value: 2.5,
          unit: 'Liters',
          date: '2023-04-01T21:00:00Z',
        },
      ],
      Notifications: [
        {
          description: 'Workout Reminder',
          relatedCustomer: 1,
          type: 'Reminder',
          message: "Don't forget your workout session today at 5 PM!",
          dateScheduled: '2023-04-05T17:00:00Z',
          status: 'Scheduled',
        },
        {
          description: 'Nutrition Plan Update',
          relatedCustomer: 2,
          type: 'Update',
          message:
            'Your nutrition plan has been updated. Check out the new items!',
          dateScheduled: '2023-04-06T09:00:00Z',
          status: 'Delivered',
        },
        {
          description: 'Subscription Renewal',
          relatedCustomer: 3,
          type: 'Alert',
          message:
            'Your subscription will renew in 3 days. Ensure your billing details are up to date.',
          dateScheduled: '2023-04-07T12:00:00Z',
          status: 'Scheduled',
        },
        {
          description: 'Weekly Progress Report',
          relatedCustomer: 4,
          type: 'Report',
          message:
            "Your weekly progress report is ready. You've made great improvements!",
          dateScheduled: '2023-04-08T18:00:00Z',
          status: 'Delivered',
        },
        {
          description: 'Support Ticket Resolved',
          relatedCustomer: 5,
          type: 'Support',
          message:
            'Your recent support ticket regarding login issues has been resolved.',
          dateScheduled: '2023-04-09T10:00:00Z',
          status: 'Resolved',
        },
      ],
      SupportTickets: [
        {
          description: 'Issue with workout tracking accuracy.',
          relatedTicket: 1,
          relatedUser: 3,
          relatedCustomer: 2,
          status: 'Open',
          creationDate: '2023-04-01T10:00:00Z',
          resolutionDate: '1970-01-01T00:00:00.000Z',
        },
        {
          description: 'Diet plan does not update.',
          relatedTicket: 2,
          relatedUser: 1,
          relatedCustomer: 1,
          status: 'Resolved',
          creationDate: '2023-04-02T11:30:00Z',
          resolutionDate: '2023-04-05T15:00:00Z',
        },
        {
          description: 'App crashes on opening nutrition tab.',
          relatedTicket: 3,
          relatedUser: 4,
          relatedCustomer: 3,
          status: 'In Progress',
          creationDate: '2023-04-03T09:20:00Z',
          resolutionDate: '1970-01-01T00:00:00.000Z',
        },
        {
          description: 'Cannot reset password via email.',
          relatedTicket: 4,
          relatedUser: 2,
          relatedCustomer: 4,
          status: 'Open',
          creationDate: '2023-04-04T14:45:00Z',
          resolutionDate: '1970-01-01T00:00:00.000Z',
        },
        {
          description: 'Feedback on new workout feature.',
          relatedTicket: 5,
          relatedUser: 5,
          relatedCustomer: 5,
          status: 'Closed',
          creationDate: '2023-04-05T16:30:00Z',
          resolutionDate: '2023-04-06T10:15:00Z',
        },
      ],
    };
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true) {
      console.log('   Seeding database...');
      await this.SeedResource('UsersEntity', data.Users);
      await this.SeedResource('CustomersEntity', data.Customers);
      await this.SeedResource('WorkoutsEntity', data.Workouts);
      await this.SeedResource('NutritionEntity', data.Nutrition);
      await this.SeedResource('HealthMetricsEntity', data.HealthMetrics);
      await this.SeedResource('NotificationsEntity', data.Notifications);
      await this.SeedResource('SupportTicketsEntity', data.SupportTickets);
      await this.SeedResource('SettingsEntity', {
        settingname: 'isSeeded',
        settingvalue: 'true',
      });
    } else {
      console.log('   Database seeded already!');
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository('SettingsEntity');
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: 'isSeeded',
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log('   Seeding table ' + resourceName);
    await repo.upsert(resourceData, ['id']);
  }
}
